#!/bin/bash
_CURRENT_FILE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
_CURRENT_RUNNING_DIR="$( cd "$( dirname "." )" && pwd )"


. "${_CURRENT_FILE_DIR}/stella-link.sh" include
. "${_CURRENT_FILE_DIR}/lib/lib.sh"
. "${_CURRENT_FILE_DIR}/lib/lib_vscode.sh"
. "${_CURRENT_FILE_DIR}/lib/lib_gemini.sh"
. "${_CURRENT_FILE_DIR}/lib/lib_opencode.sh"
. "${_CURRENT_FILE_DIR}/lib/lib_mcp.sh"

# --- USAGE ---
usage() {
    cat << EOF
IATools

Usage: iatools [options]

Options:
    init                    Install/Reinstall dependencies.
    help                    Display this help message.
    shell                   Enter iatools context and path.
    ----
    gc : gemini-cli - https://google-gemini.github.io/gemini-cli
    gc install [@version]           Install and configure Gemini CLI. (main versions are latest, nightly, preview) (when asked to relaunch gemini cli, use 'iatools gc launch' command)
    gc uninstall                    Uninstall Gemini CLI (keeping all configuration unchanged. to remove configuration use 'iatools gc reset' command)
    gc configure                    Configure Gemini CLI. ('iatools gc install' include configuration)
    gc show-config                  Show current Gemini CLI configuration.
    gc reset                        Reset all Gemini CLI configuration.
    gc launch [context folder] -- <other gemini options>                  
                                    Launch Gemini CLI. You can use 'gemini' command in your terminal
                                    put in your PATH ${IATOOLS_GEMINI_LAUNCHER_HOME}
                                    done by default in vscode terminal.
    gc mcp calculator install|uninstall         Add mcp-calculator local server configuration.
    gc mcp github install|uninstall             Add mcp-github remote server configuration.
    gc mcp desktop-commander install|uninstall  Add mcp-desktop-commander local server configuration.
    gc mcp context7 install|uninstall   [CONTEXT7_API_KEY]        Add mcp-context7 local server configuration. Provide optional CONTEXT7_API_KEY as environment variable or command argument.
    gc mcp data commons install|uninstall [DC_API_KEY]          Add mcp-data-commons remote server configuration. Provide mandatory DC_API_KEY from https://apikeys.datacommons.org/ as environment variable or command argument.
    ----
    oc : opencode - https://opencode.ai
    oc install                          Install and configure Opencode.
    oc uninstall                        Uninstall Opencode (keeping all configuration unchanged. to remove configuration use 'iatools oc reset' command)
    oc configure                        Configure Opencode. ('iatools oc install' include configuration)
    oc show-config                      Show current Opencode configuration.
    oc reset                            Reset all Opencode configuration.
    oc launch [context folder] -- <other opencode options>                   Launch Opencode.
    oc mcp calculator install|uninstall         Add mcp-calculator local server configuration.
    oc mcp github install|uninstall             Add mcp-github remote server configuration.
    oc mcp context7 install|uninstall           Add mcp-context7 local server configuration.
    ----
    npm-config set <key> <value>    Set a npm configuration for the internal nodejs.
    ----
EOF
}

iatools_path() {
    export IATOOLS_LAUNCHER_HOME="${STELLA_APP_WORK_ROOT}/launcher"
    mkdir -p "${IATOOLS_LAUNCHER_HOME}"

    export IATOOLS_MCP_LAUNCHER_HOME="${IATOOLS_LAUNCHER_HOME}/mcp"
    mkdir -p "${IATOOLS_MCP_LAUNCHER_HOME}"

    export IATOOLS_ISOLATED_DEPENDENCIES_ROOT="${STELLA_APP_WORK_ROOT}/isolated_dependencies"
    mkdir -p "${IATOOLS_ISOLATED_DEPENDENCIES_ROOT}"

    gemini_path
    opencode_path
    vscode_path
}


runtime_path() {
    # add launchers to current path
    export PATH="${IATOOLS_GEMINI_LAUNCHER_HOME}:${IATOOLS_OPENCODE_LAUNCHER_HOME}:${PATH}"

    # NOTE : we do not permanently add runtime paths (nodejs, python, ...)  to current system path to not override eventually existing runtime
    # used by gemini, opencode and several MCP local server
    if check_requirements "nodejs" "VERBOSE"; then
        export IATOOLS_NODEJS_BIN_PATH="${IATOOLS_ISOLATED_DEPENDENCIES_ROOT}/nodejs/bin/"
    else
        # we use an already installed nodejs, not iatools nodejs
        export IATOOLS_NODEJS_BIN_PATH=""
    fi
    
    # used by MCP local server
    if check_requirements "python" "VERBOSE"; then
        export IATOOLS_PYTHON_BIN_PATH="${IATOOLS_ISOLATED_DEPENDENCIES_ROOT}/miniforge3/bin/"
    else
        # we use an already installed python, not iatools python
        export IATOOLS_PYTHON_BIN_PATH=""
    fi

}



# Main function
main() {
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        usage
        exit 0
    fi

    if [ "$#" -eq 0 ]; then
        usage
        exit 1
    fi

    local command="$1"
    shift
    case "$command" in
        help)
            usage
            exit 0
            ;;
        shell)
            $STELLA_API boot_app_shell "local"
            ;;
        init)
            # remove dependencies first, to always install from scratch
            iatools_remove_dependencies

            echo "- Install internal dependencies for iatools (which will be added to iatools PATH while running)"
            $STELLA_API get_feature "jq"

            echo "- Install other dependencies (for mcp servers and other commands) in an isolated way. (None of those will never been added to any PATH)"
            for f in $STELLA_APP_FEATURE_LIST; do
                case "$f" in
                    jq*);;
                    nodejs)
                        if [ "$STELLA_CURRENT_PLATFORM" = "linux" ]; then
		                    if [ "$STELLA_CURRENT_CPU_FAMILY" = "intel" ]; then
                                _ldd_version="$(ldd --version 2>/dev/null | awk '/ldd/{print $NF}')"
                                if [ "${_ldd_version}" = "2.17" ]; then
                                    f="nodejs#23_7_0_glibc_217"
                                    echo "-- detected glibc 2.17 switch to nodejs special build for it"
                                fi
                            fi
                        fi
                    # this notation do not stop case statement workflow and continue to next pattern without testing any math
                    ;&
                    *)
                        _feature=""
                        _feature_name=""

                        $STELLA_API select_official_schema "$f" "_feature" "_feature_name"
                        if [ ! "$_feature" = "" ]; then
                            echo "-- install $_feature"
                            mkdir -p "${IATOOLS_ISOLATED_DEPENDENCIES_ROOT}/${_feature_name}"
                            $STELLA_API feature_install "$f" "EXPORT ${IATOOLS_ISOLATED_DEPENDENCIES_ROOT}/${_feature_name}"
                        else
                            echo "!! WARN : $f is not a valid feature for stella framework"
                        fi
                    # this notation do not stop case statement workflow and continue to next pattern by testing next pattern
                    ;;&
                    miniforge3)
                        echo "-- install python pipx and uv package/project manager"
                        ${IATOOLS_PYTHON_BIN_PATH}mamba install -y pipx uv
                    ;;
                esac
            done
            
            ;;
        npm-config)
            if ! check_requirements "nodejs"; then echo " -- ERROR : nodejs missing, launch iatools init"; exit 1; fi;
            local sub_command="$1"
            shift
            case "$sub_command" in
                set)
                    local key="$1"
                    shift
                    local value="$1"
                    shift
                    if [ -z "$key" ]; then
                        echo " -- ERROR : Missing key for npm-config set"
                        usage
                        exit 1
                    fi
                    echo "Setting npm config: $key = $value"
                    PATH="${IATOOLS_NODEJS_BIN_PATH}:${PATH}" npm config set "$key" "$value" -g
                    ;;
                *)
                    echo "Error: Unknown command $sub_command for npm-config"
                    usage
                    exit 1
                    ;;
            esac
            ;;
        oc)
            . "${_CURRENT_FILE_DIR}/lib/main_oc.sh"
            ;;
        gc)
            . "${_CURRENT_FILE_DIR}/lib/main_gc.sh"
            ;;
        *)
            echo "Error: Unknown command $command"
            usage
            exit 1
            ;;
    esac

    
}


iatools_path
runtime_path

main "$@"
